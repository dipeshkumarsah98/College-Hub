// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = "./dbml"
  outputName          = "seed-model.dbml"
  projectName         = "SEED 2.0"
  projectDatabaseType = "PostgreSQL"
  projectNote         = "SEED 2.0"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "./docs"
}

enum Status {
  ACTIVE
  INACTIVE
  BLOCKED
  DRAFT
}

enum Role {
  ADMIN
  USER
  STAFF
}

model User {
  id             String           @id @default(uuid())
  name           String
  email          String           @unique
  password       String
  gender         String?
  phoneNumber    String?
  dob            String?
  profileImage   String?
  roles          Role[]           @default([USER])
  address        String?
  tags           String[]
  course         String?
  section        String?
  batch          String?
  emailtemplates EmailTemplates[]
  isActive       Boolean          @default(true)
  isBlocked      Boolean          @default(false)
  lastLoggedIn   DateTime?        @default(now())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  Event          CalendarEvents[]

  @@map("users")
}

model EmailTemplates {
  id        String @id @default(uuid())
  subject   String
  body      String
  condition Json?
  createdBy User   @relation(fields: [userId], references: [id])
  userId    String
  status    String

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  CalendarEvents CalendarEvents[]

  @@map("email_templates")
}

model CalendarEvents {
  id              String         @id @default(uuid())
  title           String
  description     String
  eventDateTime   DateTime
  emailTemplateId String
  emailTemplate   EmailTemplates @relation(fields: [emailTemplateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  condition       Json
  color           String         @default("#000000")
  to              String?

  createdBy User   @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId    String
  status    String @default("PENDING")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("calendar_events")
}
